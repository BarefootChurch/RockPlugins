/* 
 * Push API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@subsplash.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace com.subsplash.Model
{
    /// <summary>
    /// A Topic represents a group of users that is used with push notifications.
    /// </summary>
    [DataContract]
        public partial class Topic :  IEquatable<Topic>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Topic" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of topic object.</param>
        /// <param name="appKey">Six character app code.</param>
        /// <param name="createdAt">Moment when the topic was created.</param>
        /// <param name="updatedAt">Moment when the topic was updated.</param>
        /// <param name="deletedAt">Moment when the topic was deleted.</param>
        /// <param name="deactivatedAt">Moment when the topic was deactivated.</param>
        /// <param name="title">The title of the topic.</param>
        /// <param name="isGeneral">Indicates whether the topic is general (vs specific).</param>
        /// <param name="isPrivate">Indicates whether the topic private (vs public).</param>
        /// <param name="awsSnsTopicArn">Topic Amazon Resource Name.</param>
        /// <param name="numSubscribers">The number of subscriptions on this topic.</param>
        /// <param name="links">links.</param>
        public Topic(Guid? id = default(Guid?), string appKey = default(string), DateTime? createdAt = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? deletedAt = default(DateTime?), DateTime? deactivatedAt = default(DateTime?), string title = default(string), bool? isGeneral = default(bool?), bool? isPrivate = default(bool?), string awsSnsTopicArn = default(string), int? numSubscribers = default(int?), SelfLink links = default(SelfLink))
        {
            this.Id = id;
            this.AppKey = appKey;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.DeletedAt = deletedAt;
            this.DeactivatedAt = deactivatedAt;
            this.Title = title;
            this.IsGeneral = isGeneral;
            this.IsPrivate = isPrivate;
            this.AwsSnsTopicArn = awsSnsTopicArn;
            this.NumSubscribers = numSubscribers;
            this.Links = links;
        }
        
        /// <summary>
        /// Unique identifier of topic object
        /// </summary>
        /// <value>Unique identifier of topic object</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Six character app code
        /// </summary>
        /// <value>Six character app code</value>
        [DataMember(Name="app_key", EmitDefaultValue=false)]
        public string AppKey { get; set; }

        /// <summary>
        /// Moment when the topic was created
        /// </summary>
        /// <value>Moment when the topic was created</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Moment when the topic was updated
        /// </summary>
        /// <value>Moment when the topic was updated</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Moment when the topic was deleted
        /// </summary>
        /// <value>Moment when the topic was deleted</value>
        [DataMember(Name="deleted_at", EmitDefaultValue=false)]
        public DateTime? DeletedAt { get; set; }

        /// <summary>
        /// Moment when the topic was deactivated
        /// </summary>
        /// <value>Moment when the topic was deactivated</value>
        [DataMember(Name="deactivated_at", EmitDefaultValue=false)]
        public DateTime? DeactivatedAt { get; set; }

        /// <summary>
        /// The title of the topic
        /// </summary>
        /// <value>The title of the topic</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Indicates whether the topic is general (vs specific)
        /// </summary>
        /// <value>Indicates whether the topic is general (vs specific)</value>
        [DataMember(Name="is_general", EmitDefaultValue=false)]
        public bool? IsGeneral { get; set; }

        /// <summary>
        /// Indicates whether the topic private (vs public)
        /// </summary>
        /// <value>Indicates whether the topic private (vs public)</value>
        [DataMember(Name="is_private", EmitDefaultValue=false)]
        public bool? IsPrivate { get; set; }

        /// <summary>
        /// Topic Amazon Resource Name
        /// </summary>
        /// <value>Topic Amazon Resource Name</value>
        [DataMember(Name="aws_sns_topic_arn", EmitDefaultValue=false)]
        public string AwsSnsTopicArn { get; set; }

        /// <summary>
        /// The number of subscriptions on this topic
        /// </summary>
        /// <value>The number of subscriptions on this topic</value>
        [DataMember(Name="num_subscribers", EmitDefaultValue=false)]
        public int? NumSubscribers { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="_links", EmitDefaultValue=false)]
        public SelfLink Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Topic {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AppKey: ").Append(AppKey).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  DeactivatedAt: ").Append(DeactivatedAt).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  IsGeneral: ").Append(IsGeneral).Append("\n");
            sb.Append("  IsPrivate: ").Append(IsPrivate).Append("\n");
            sb.Append("  AwsSnsTopicArn: ").Append(AwsSnsTopicArn).Append("\n");
            sb.Append("  NumSubscribers: ").Append(NumSubscribers).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Topic);
        }

        /// <summary>
        /// Returns true if Topic instances are equal
        /// </summary>
        /// <param name="input">Instance of Topic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Topic input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AppKey == input.AppKey ||
                    (this.AppKey != null &&
                    this.AppKey.Equals(input.AppKey))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.DeletedAt == input.DeletedAt ||
                    (this.DeletedAt != null &&
                    this.DeletedAt.Equals(input.DeletedAt))
                ) && 
                (
                    this.DeactivatedAt == input.DeactivatedAt ||
                    (this.DeactivatedAt != null &&
                    this.DeactivatedAt.Equals(input.DeactivatedAt))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.IsGeneral == input.IsGeneral ||
                    (this.IsGeneral != null &&
                    this.IsGeneral.Equals(input.IsGeneral))
                ) && 
                (
                    this.IsPrivate == input.IsPrivate ||
                    (this.IsPrivate != null &&
                    this.IsPrivate.Equals(input.IsPrivate))
                ) && 
                (
                    this.AwsSnsTopicArn == input.AwsSnsTopicArn ||
                    (this.AwsSnsTopicArn != null &&
                    this.AwsSnsTopicArn.Equals(input.AwsSnsTopicArn))
                ) && 
                (
                    this.NumSubscribers == input.NumSubscribers ||
                    (this.NumSubscribers != null &&
                    this.NumSubscribers.Equals(input.NumSubscribers))
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AppKey != null)
                    hashCode = hashCode * 59 + this.AppKey.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.DeletedAt != null)
                    hashCode = hashCode * 59 + this.DeletedAt.GetHashCode();
                if (this.DeactivatedAt != null)
                    hashCode = hashCode * 59 + this.DeactivatedAt.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.IsGeneral != null)
                    hashCode = hashCode * 59 + this.IsGeneral.GetHashCode();
                if (this.IsPrivate != null)
                    hashCode = hashCode * 59 + this.IsPrivate.GetHashCode();
                if (this.AwsSnsTopicArn != null)
                    hashCode = hashCode * 59 + this.AwsSnsTopicArn.GetHashCode();
                if (this.NumSubscribers != null)
                    hashCode = hashCode * 59 + this.NumSubscribers.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
