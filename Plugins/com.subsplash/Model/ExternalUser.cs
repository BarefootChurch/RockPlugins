/* 
 * Push API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@subsplash.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace com.subsplash.Model
{
    /// <summary>
    /// Describes a user external to the Subsplash system using a user id known by an external system (auth provider) and the id of the  external auth provider. Note this object allows multiple external user ids as long as they are from the same auth provider. 
    /// </summary>
    [DataContract]
        public partial class ExternalUser :  IEquatable<ExternalUser>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalUser" /> class.
        /// </summary>
        /// <param name="userIds">An array of external user ids recognized by an auth provider.</param>
        /// <param name="authProviderId">Unique identifier of an auth provider.</param>
        public ExternalUser(List<string> userIds = default(List<string>), Guid? authProviderId = default(Guid?))
        {
            this.UserIds = userIds;
            this.AuthProviderId = authProviderId;
        }
        
        /// <summary>
        /// An array of external user ids recognized by an auth provider
        /// </summary>
        /// <value>An array of external user ids recognized by an auth provider</value>
        [DataMember(Name="user_ids", EmitDefaultValue=false)]
        public List<string> UserIds { get; set; }

        /// <summary>
        /// Unique identifier of an auth provider
        /// </summary>
        /// <value>Unique identifier of an auth provider</value>
        [DataMember(Name="auth_provider_id", EmitDefaultValue=false)]
        public Guid? AuthProviderId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExternalUser {\n");
            sb.Append("  UserIds: ").Append(UserIds).Append("\n");
            sb.Append("  AuthProviderId: ").Append(AuthProviderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExternalUser);
        }

        /// <summary>
        /// Returns true if ExternalUser instances are equal
        /// </summary>
        /// <param name="input">Instance of ExternalUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalUser input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserIds == input.UserIds ||
                    this.UserIds != null &&
                    input.UserIds != null &&
                    this.UserIds.SequenceEqual(input.UserIds)
                ) && 
                (
                    this.AuthProviderId == input.AuthProviderId ||
                    (this.AuthProviderId != null &&
                    this.AuthProviderId.Equals(input.AuthProviderId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserIds != null)
                    hashCode = hashCode * 59 + this.UserIds.GetHashCode();
                if (this.AuthProviderId != null)
                    hashCode = hashCode * 59 + this.AuthProviderId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
