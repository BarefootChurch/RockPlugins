/* 
 * Push API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@subsplash.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace com.subsplash.Model
{
    /// <summary>
    /// Embedded properties of the notification. Note when sending a notification to an &#x60;external_user&#x60;, &#x60;geofence&#x60; and &#x60;topic&#x60; are not allowed.
    /// </summary>
    [DataContract]
        public partial class NotificationEmbedded :  IEquatable<NotificationEmbedded>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationEmbedded" /> class.
        /// </summary>
        /// <param name="geofence">geofence.</param>
        /// <param name="topics">topics.</param>
        /// <param name="externalUser">externalUser.</param>
        public NotificationEmbedded(Geofence geofence = default(Geofence), List<Topic> topics = default(List<Topic>), ExternalUser externalUser = default(ExternalUser))
        {
            this.Geofence = geofence;
            this.Topics = topics;
            this.ExternalUser = externalUser;
        }
        
        /// <summary>
        /// Gets or Sets Geofence
        /// </summary>
        [DataMember(Name="geofence", EmitDefaultValue=false)]
        public Geofence Geofence { get; set; }

        /// <summary>
        /// Gets or Sets Topics
        /// </summary>
        [DataMember(Name="topics", EmitDefaultValue=false)]
        public List<Topic> Topics { get; set; }

        /// <summary>
        /// Gets or Sets ExternalUser
        /// </summary>
        [DataMember(Name="external-user", EmitDefaultValue=false)]
        public ExternalUser ExternalUser { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotificationEmbedded {\n");
            sb.Append("  Geofence: ").Append(Geofence).Append("\n");
            sb.Append("  Topics: ").Append(Topics).Append("\n");
            sb.Append("  ExternalUser: ").Append(ExternalUser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotificationEmbedded);
        }

        /// <summary>
        /// Returns true if NotificationEmbedded instances are equal
        /// </summary>
        /// <param name="input">Instance of NotificationEmbedded to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationEmbedded input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Geofence == input.Geofence ||
                    (this.Geofence != null &&
                    this.Geofence.Equals(input.Geofence))
                ) && 
                (
                    this.Topics == input.Topics ||
                    this.Topics != null &&
                    input.Topics != null &&
                    this.Topics.SequenceEqual(input.Topics)
                ) && 
                (
                    this.ExternalUser == input.ExternalUser ||
                    (this.ExternalUser != null &&
                    this.ExternalUser.Equals(input.ExternalUser))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Geofence != null)
                    hashCode = hashCode * 59 + this.Geofence.GetHashCode();
                if (this.Topics != null)
                    hashCode = hashCode * 59 + this.Topics.GetHashCode();
                if (this.ExternalUser != null)
                    hashCode = hashCode * 59 + this.ExternalUser.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
