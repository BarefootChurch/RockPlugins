/* 
 * Push API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@subsplash.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace com.subsplash.Model
{
    /// <summary>
    /// App
    /// </summary>
    [DataContract]
        public partial class App :  IEquatable<App>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="App" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of app object.</param>
        /// <param name="createdAt">Moment when the app was created.</param>
        /// <param name="updatedAt">Moment when the app was updated.</param>
        /// <param name="deletedAt">Moment when the app was deleted.</param>
        /// <param name="title">The title of the app..</param>
        /// <param name="internalTitle">The internal title of the app..</param>
        /// <param name="timezone">timezone.</param>
        /// <param name="isContainer">Indicates whether the app is a container.</param>
        /// <param name="cancelled">Indicates whether the app is cancelled.</param>
        /// <param name="embedded">Embedded proeprties of the app..</param>
        /// <param name="links">links.</param>
        public App(Guid? id = default(Guid?), DateTime? createdAt = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? deletedAt = default(DateTime?), string title = default(string), string internalTitle = default(string), Timezone timezone = default(Timezone), bool? isContainer = default(bool?), bool? cancelled = default(bool?), Object embedded = default(Object), SelfLink links = default(SelfLink))
        {
            this.Id = id;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.DeletedAt = deletedAt;
            this.Title = title;
            this.InternalTitle = internalTitle;
            this.Timezone = timezone;
            this.IsContainer = isContainer;
            this.Cancelled = cancelled;
            this.Embedded = embedded;
            this.Links = links;
        }
        
        /// <summary>
        /// Unique identifier of app object
        /// </summary>
        /// <value>Unique identifier of app object</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Moment when the app was created
        /// </summary>
        /// <value>Moment when the app was created</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Moment when the app was updated
        /// </summary>
        /// <value>Moment when the app was updated</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Moment when the app was deleted
        /// </summary>
        /// <value>Moment when the app was deleted</value>
        [DataMember(Name="deleted_at", EmitDefaultValue=false)]
        public DateTime? DeletedAt { get; set; }

        /// <summary>
        /// The title of the app.
        /// </summary>
        /// <value>The title of the app.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// The internal title of the app.
        /// </summary>
        /// <value>The internal title of the app.</value>
        [DataMember(Name="internal_title", EmitDefaultValue=false)]
        public string InternalTitle { get; set; }

        /// <summary>
        /// Short unique identifier of the app.
        /// </summary>
        /// <value>Short unique identifier of the app.</value>
        [DataMember(Name="short_code", EmitDefaultValue=false)]
        public string ShortCode { get; private set; }

        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public Timezone Timezone { get; set; }

        /// <summary>
        /// Indicates whether the app is a container
        /// </summary>
        /// <value>Indicates whether the app is a container</value>
        [DataMember(Name="is_container", EmitDefaultValue=false)]
        public bool? IsContainer { get; set; }

        /// <summary>
        /// Indicates whether the app is cancelled
        /// </summary>
        /// <value>Indicates whether the app is cancelled</value>
        [DataMember(Name="cancelled", EmitDefaultValue=false)]
        public bool? Cancelled { get; set; }

        /// <summary>
        /// Embedded proeprties of the app.
        /// </summary>
        /// <value>Embedded proeprties of the app.</value>
        [DataMember(Name="_embedded", EmitDefaultValue=false)]
        public Object Embedded { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="_links", EmitDefaultValue=false)]
        public SelfLink Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class App {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  InternalTitle: ").Append(InternalTitle).Append("\n");
            sb.Append("  ShortCode: ").Append(ShortCode).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  IsContainer: ").Append(IsContainer).Append("\n");
            sb.Append("  Cancelled: ").Append(Cancelled).Append("\n");
            sb.Append("  Embedded: ").Append(Embedded).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as App);
        }

        /// <summary>
        /// Returns true if App instances are equal
        /// </summary>
        /// <param name="input">Instance of App to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(App input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.DeletedAt == input.DeletedAt ||
                    (this.DeletedAt != null &&
                    this.DeletedAt.Equals(input.DeletedAt))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.InternalTitle == input.InternalTitle ||
                    (this.InternalTitle != null &&
                    this.InternalTitle.Equals(input.InternalTitle))
                ) && 
                (
                    this.ShortCode == input.ShortCode ||
                    (this.ShortCode != null &&
                    this.ShortCode.Equals(input.ShortCode))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.IsContainer == input.IsContainer ||
                    (this.IsContainer != null &&
                    this.IsContainer.Equals(input.IsContainer))
                ) && 
                (
                    this.Cancelled == input.Cancelled ||
                    (this.Cancelled != null &&
                    this.Cancelled.Equals(input.Cancelled))
                ) && 
                (
                    this.Embedded == input.Embedded ||
                    (this.Embedded != null &&
                    this.Embedded.Equals(input.Embedded))
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.DeletedAt != null)
                    hashCode = hashCode * 59 + this.DeletedAt.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.InternalTitle != null)
                    hashCode = hashCode * 59 + this.InternalTitle.GetHashCode();
                if (this.ShortCode != null)
                    hashCode = hashCode * 59 + this.ShortCode.GetHashCode();
                if (this.Timezone != null)
                    hashCode = hashCode * 59 + this.Timezone.GetHashCode();
                if (this.IsContainer != null)
                    hashCode = hashCode * 59 + this.IsContainer.GetHashCode();
                if (this.Cancelled != null)
                    hashCode = hashCode * 59 + this.Cancelled.GetHashCode();
                if (this.Embedded != null)
                    hashCode = hashCode * 59 + this.Embedded.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
