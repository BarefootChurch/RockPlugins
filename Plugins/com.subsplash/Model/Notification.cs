/* 
 * Push API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@subsplash.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace com.subsplash.Model
{
    /// <summary>
    /// Notification is a representation of a push notification.
    /// </summary>
    [DataContract]
        public partial class Notification :  IEquatable<Notification>, IValidatableObject
    {
        /// <summary>
        /// Computed property based on the notifications &#x60;expired_at&#x60;, &#x60;published_at&#x60;, &#x60;sent_at&#x60;, and &#x60;deleted_at&#x60; properties.
        /// </summary>
        /// <value>Computed property based on the notifications &#x60;expired_at&#x60;, &#x60;published_at&#x60;, &#x60;sent_at&#x60;, and &#x60;deleted_at&#x60; properties.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            [EnumMember(Value = "active")]
            Active = 1,
            /// <summary>
            /// Enum Scheduled for value: scheduled
            /// </summary>
            [EnumMember(Value = "scheduled")]
            Scheduled = 2,
            /// <summary>
            /// Enum Draft for value: draft
            /// </summary>
            [EnumMember(Value = "draft")]
            Draft = 3,
            /// <summary>
            /// Enum Expired for value: expired
            /// </summary>
            [EnumMember(Value = "expired")]
            Expired = 4,
            /// <summary>
            /// Enum Deleted for value: deleted
            /// </summary>
            [EnumMember(Value = "deleted")]
            Deleted = 5,
            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 6,
            /// <summary>
            /// Enum Sent for value: sent
            /// </summary>
            [EnumMember(Value = "sent")]
            Sent = 7,
            /// <summary>
            /// Enum Tosend for value: to_send
            /// </summary>
            [EnumMember(Value = "to_send")]
            Tosend = 8        }
        /// <summary>
        /// Computed property based on the notifications &#x60;expired_at&#x60;, &#x60;published_at&#x60;, &#x60;sent_at&#x60;, and &#x60;deleted_at&#x60; properties.
        /// </summary>
        /// <value>Computed property based on the notifications &#x60;expired_at&#x60;, &#x60;published_at&#x60;, &#x60;sent_at&#x60;, and &#x60;deleted_at&#x60; properties.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }

        public Notification() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="Notification" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of notification object..</param>
        /// <param name="appKey">Six character app code..</param>
        /// <param name="createdAt">Moment when the notification was created..</param>
        /// <param name="updatedAt">Moment when the notification was updated..</param>
        /// <param name="deletedAt">Moment when the notification was deleted..</param>
        /// <param name="title">Title of a notification that is displayed and bolded at the top of the notification on the lock screen and in the Notification Center..</param>
        /// <param name="subtitle">Subtitle of a notification..</param>
        /// <param name="body">Text that is displayed in the notification on the lock screen, Notification Center, and inbox in the app..</param>
        /// <param name="additionalDescription">Text that is displayed in the notification detail view in the app..</param>
        /// <param name="sentCount">Number of devices this notification was sent to..</param>
        /// <param name="receivedCount">Number of devices that received this notification..</param>
        /// <param name="displayedCount">Number of devices that displayed this notification..</param>
        /// <param name="openedCount">Number of devices that opened this notification..</param>
        /// <param name="snsMessageIds">Unique identifiers assigned to the published message in SNS. Remote notifications should only have one id, but geonotifications have multiple ids associated with the notification (one for the adding and one for removing the silent notification). It is not guaranteed that the first id is the id associated with the add command, but it is highly likely that this is the case. .</param>
        /// <param name="expiredAt">Moment when the notification expires. Only applies to a &#x60;notification&#x60; with a &#x60;geofence&#x60;..</param>
        /// <param name="publishedAt">Moment when notification will be sent by the push agent..</param>
        /// <param name="sentAt">Moment when notification was sent as recorded by the push agent..</param>
        /// <param name="sent">Represents whether a message has been sent..</param>
        /// <param name="sendErrMsg">The error that occurred when sending the notification.</param>
        /// <param name="removedAt">The time in which this notification was removed.</param>
        /// <param name="embedded">embedded.</param>
        /// <param name="links">links.</param>
        public Notification(Guid? id = default(Guid?), string appKey = default(string), DateTime? createdAt = default(DateTime?), DateTime? updatedAt = default(DateTime?), DateTime? deletedAt = default(DateTime?), string title = default(string), string subtitle = default(string), string body = default(string), string additionalDescription = default(string), int? sentCount = default(int?), int? receivedCount = default(int?), int? displayedCount = default(int?), int? openedCount = default(int?), List<string> snsMessageIds = default(List<string>), DateTime? expiredAt = default(DateTime?), DateTime? publishedAt = default(DateTime?), DateTime? sentAt = default(DateTime?), bool? sent = default(bool?), string sendErrMsg = default(string), DateTime? removedAt = default(DateTime?), NotificationEmbedded embedded = default(NotificationEmbedded), SelfLink links = default(SelfLink))
        {
            this.Id = id;
            this.AppKey = appKey;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.DeletedAt = deletedAt;
            this.Title = title;
            this.Subtitle = subtitle;
            this.Body = body;
            this.AdditionalDescription = additionalDescription;
            this.SentCount = sentCount;
            this.ReceivedCount = receivedCount;
            this.DisplayedCount = displayedCount;
            this.OpenedCount = openedCount;
            this.SnsMessageIds = snsMessageIds;
            this.ExpiredAt = expiredAt;
            this.PublishedAt = publishedAt;
            this.SentAt = sentAt;
            this.Sent = sent;
            this.SendErrMsg = sendErrMsg;
            this.RemovedAt = removedAt;
            this.Embedded = embedded;
            this.Links = links;
        }
        
        /// <summary>
        /// Unique identifier of notification object.
        /// </summary>
        /// <value>Unique identifier of notification object.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Six character app code.
        /// </summary>
        /// <value>Six character app code.</value>
        [DataMember(Name="app_key", EmitDefaultValue=false)]
        public string AppKey { get; set; }

        /// <summary>
        /// Moment when the notification was created.
        /// </summary>
        /// <value>Moment when the notification was created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Moment when the notification was updated.
        /// </summary>
        /// <value>Moment when the notification was updated.</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Moment when the notification was deleted.
        /// </summary>
        /// <value>Moment when the notification was deleted.</value>
        [DataMember(Name="deleted_at", EmitDefaultValue=false)]
        public DateTime? DeletedAt { get; set; }

        /// <summary>
        /// Title of a notification that is displayed and bolded at the top of the notification on the lock screen and in the Notification Center.
        /// </summary>
        /// <value>Title of a notification that is displayed and bolded at the top of the notification on the lock screen and in the Notification Center.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Subtitle of a notification.
        /// </summary>
        /// <value>Subtitle of a notification.</value>
        [DataMember(Name="subtitle", EmitDefaultValue=false)]
        public string Subtitle { get; set; }

        /// <summary>
        /// Text that is displayed in the notification on the lock screen, Notification Center, and inbox in the app.
        /// </summary>
        /// <value>Text that is displayed in the notification on the lock screen, Notification Center, and inbox in the app.</value>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// Text that is displayed in the notification detail view in the app.
        /// </summary>
        /// <value>Text that is displayed in the notification detail view in the app.</value>
        [DataMember(Name="additional_description", EmitDefaultValue=false)]
        public string AdditionalDescription { get; set; }


        /// <summary>
        /// Number of devices this notification was sent to.
        /// </summary>
        /// <value>Number of devices this notification was sent to.</value>
        [DataMember(Name="sent_count", EmitDefaultValue=false)]
        public int? SentCount { get; set; }

        /// <summary>
        /// Number of devices that received this notification.
        /// </summary>
        /// <value>Number of devices that received this notification.</value>
        [DataMember(Name="received_count", EmitDefaultValue=false)]
        public int? ReceivedCount { get; set; }

        /// <summary>
        /// Number of devices that displayed this notification.
        /// </summary>
        /// <value>Number of devices that displayed this notification.</value>
        [DataMember(Name="displayed_count", EmitDefaultValue=false)]
        public int? DisplayedCount { get; set; }

        /// <summary>
        /// Number of devices that opened this notification.
        /// </summary>
        /// <value>Number of devices that opened this notification.</value>
        [DataMember(Name="opened_count", EmitDefaultValue=false)]
        public int? OpenedCount { get; set; }

        /// <summary>
        /// Unique identifiers assigned to the published message in SNS. Remote notifications should only have one id, but geonotifications have multiple ids associated with the notification (one for the adding and one for removing the silent notification). It is not guaranteed that the first id is the id associated with the add command, but it is highly likely that this is the case. 
        /// </summary>
        /// <value>Unique identifiers assigned to the published message in SNS. Remote notifications should only have one id, but geonotifications have multiple ids associated with the notification (one for the adding and one for removing the silent notification). It is not guaranteed that the first id is the id associated with the add command, but it is highly likely that this is the case. </value>
        [DataMember(Name="sns_message_ids", EmitDefaultValue=false)]
        public List<string> SnsMessageIds { get; set; }

        /// <summary>
        /// Moment when the notification expires. Only applies to a &#x60;notification&#x60; with a &#x60;geofence&#x60;.
        /// </summary>
        /// <value>Moment when the notification expires. Only applies to a &#x60;notification&#x60; with a &#x60;geofence&#x60;.</value>
        [DataMember(Name="expired_at", EmitDefaultValue=false)]
        public DateTime? ExpiredAt { get; set; }

        /// <summary>
        /// Moment when notification will be sent by the push agent.
        /// </summary>
        /// <value>Moment when notification will be sent by the push agent.</value>
        [DataMember(Name="published_at", EmitDefaultValue=false)]
        public DateTime? PublishedAt { get; set; }

        /// <summary>
        /// Moment when notification was sent as recorded by the push agent.
        /// </summary>
        /// <value>Moment when notification was sent as recorded by the push agent.</value>
        [DataMember(Name="sent_at", EmitDefaultValue=false)]
        public DateTime? SentAt { get; set; }

        /// <summary>
        /// Represents whether a message has been sent.
        /// </summary>
        /// <value>Represents whether a message has been sent.</value>
        [DataMember(Name="sent", EmitDefaultValue=false)]
        public bool? Sent { get; set; }

        /// <summary>
        /// The error that occurred when sending the notification
        /// </summary>
        /// <value>The error that occurred when sending the notification</value>
        [DataMember(Name="send_err_msg", EmitDefaultValue=false)]
        public string SendErrMsg { get; set; }

        /// <summary>
        /// The time in which this notification was removed
        /// </summary>
        /// <value>The time in which this notification was removed</value>
        [DataMember(Name="removed_at", EmitDefaultValue=false)]
        public DateTime? RemovedAt { get; set; }

        /// <summary>
        /// Gets or Sets Embedded
        /// </summary>
        [DataMember(Name="_embedded", EmitDefaultValue=false)]
        public NotificationEmbedded Embedded { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="_links", EmitDefaultValue=false)]
        public SelfLink Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Notification {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AppKey: ").Append(AppKey).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Subtitle: ").Append(Subtitle).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  AdditionalDescription: ").Append(AdditionalDescription).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SentCount: ").Append(SentCount).Append("\n");
            sb.Append("  ReceivedCount: ").Append(ReceivedCount).Append("\n");
            sb.Append("  DisplayedCount: ").Append(DisplayedCount).Append("\n");
            sb.Append("  OpenedCount: ").Append(OpenedCount).Append("\n");
            sb.Append("  SnsMessageIds: ").Append(SnsMessageIds).Append("\n");
            sb.Append("  ExpiredAt: ").Append(ExpiredAt).Append("\n");
            sb.Append("  PublishedAt: ").Append(PublishedAt).Append("\n");
            sb.Append("  SentAt: ").Append(SentAt).Append("\n");
            sb.Append("  Sent: ").Append(Sent).Append("\n");
            sb.Append("  SendErrMsg: ").Append(SendErrMsg).Append("\n");
            sb.Append("  RemovedAt: ").Append(RemovedAt).Append("\n");
            sb.Append("  Embedded: ").Append(Embedded).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Notification);
        }

        /// <summary>
        /// Returns true if Notification instances are equal
        /// </summary>
        /// <param name="input">Instance of Notification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Notification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AppKey == input.AppKey ||
                    (this.AppKey != null &&
                    this.AppKey.Equals(input.AppKey))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.DeletedAt == input.DeletedAt ||
                    (this.DeletedAt != null &&
                    this.DeletedAt.Equals(input.DeletedAt))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Subtitle == input.Subtitle ||
                    (this.Subtitle != null &&
                    this.Subtitle.Equals(input.Subtitle))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.AdditionalDescription == input.AdditionalDescription ||
                    (this.AdditionalDescription != null &&
                    this.AdditionalDescription.Equals(input.AdditionalDescription))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SentCount == input.SentCount ||
                    (this.SentCount != null &&
                    this.SentCount.Equals(input.SentCount))
                ) && 
                (
                    this.ReceivedCount == input.ReceivedCount ||
                    (this.ReceivedCount != null &&
                    this.ReceivedCount.Equals(input.ReceivedCount))
                ) && 
                (
                    this.DisplayedCount == input.DisplayedCount ||
                    (this.DisplayedCount != null &&
                    this.DisplayedCount.Equals(input.DisplayedCount))
                ) && 
                (
                    this.OpenedCount == input.OpenedCount ||
                    (this.OpenedCount != null &&
                    this.OpenedCount.Equals(input.OpenedCount))
                ) && 
                (
                    this.SnsMessageIds == input.SnsMessageIds ||
                    this.SnsMessageIds != null &&
                    input.SnsMessageIds != null &&
                    this.SnsMessageIds.SequenceEqual(input.SnsMessageIds)
                ) && 
                (
                    this.ExpiredAt == input.ExpiredAt ||
                    (this.ExpiredAt != null &&
                    this.ExpiredAt.Equals(input.ExpiredAt))
                ) && 
                (
                    this.PublishedAt == input.PublishedAt ||
                    (this.PublishedAt != null &&
                    this.PublishedAt.Equals(input.PublishedAt))
                ) && 
                (
                    this.SentAt == input.SentAt ||
                    (this.SentAt != null &&
                    this.SentAt.Equals(input.SentAt))
                ) && 
                (
                    this.Sent == input.Sent ||
                    (this.Sent != null &&
                    this.Sent.Equals(input.Sent))
                ) && 
                (
                    this.SendErrMsg == input.SendErrMsg ||
                    (this.SendErrMsg != null &&
                    this.SendErrMsg.Equals(input.SendErrMsg))
                ) && 
                (
                    this.RemovedAt == input.RemovedAt ||
                    (this.RemovedAt != null &&
                    this.RemovedAt.Equals(input.RemovedAt))
                ) && 
                (
                    this.Embedded == input.Embedded ||
                    (this.Embedded != null &&
                    this.Embedded.Equals(input.Embedded))
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AppKey != null)
                    hashCode = hashCode * 59 + this.AppKey.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.DeletedAt != null)
                    hashCode = hashCode * 59 + this.DeletedAt.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Subtitle != null)
                    hashCode = hashCode * 59 + this.Subtitle.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.AdditionalDescription != null)
                    hashCode = hashCode * 59 + this.AdditionalDescription.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.SentCount != null)
                    hashCode = hashCode * 59 + this.SentCount.GetHashCode();
                if (this.ReceivedCount != null)
                    hashCode = hashCode * 59 + this.ReceivedCount.GetHashCode();
                if (this.DisplayedCount != null)
                    hashCode = hashCode * 59 + this.DisplayedCount.GetHashCode();
                if (this.OpenedCount != null)
                    hashCode = hashCode * 59 + this.OpenedCount.GetHashCode();
                if (this.SnsMessageIds != null)
                    hashCode = hashCode * 59 + this.SnsMessageIds.GetHashCode();
                if (this.ExpiredAt != null)
                    hashCode = hashCode * 59 + this.ExpiredAt.GetHashCode();
                if (this.PublishedAt != null)
                    hashCode = hashCode * 59 + this.PublishedAt.GetHashCode();
                if (this.SentAt != null)
                    hashCode = hashCode * 59 + this.SentAt.GetHashCode();
                if (this.Sent != null)
                    hashCode = hashCode * 59 + this.Sent.GetHashCode();
                if (this.SendErrMsg != null)
                    hashCode = hashCode * 59 + this.SendErrMsg.GetHashCode();
                if (this.RemovedAt != null)
                    hashCode = hashCode * 59 + this.RemovedAt.GetHashCode();
                if (this.Embedded != null)
                    hashCode = hashCode * 59 + this.Embedded.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
